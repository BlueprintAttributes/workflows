# Adjusted from the brilliant Ivan Tustanivsky who developed this for Sentry
#
# Credits to https://github.com/outoftheboxplugins/BuildMachines

name: Game package build

on:
  workflow_call:
    inputs:
      ue_versions:
        # Specify the list of unreal versions to build against
        # Ex: "['5.1', '5.2', '5.3']"
        default: "['5.3']"
        type: string

      platform:
        default: Windows
        description: Target platform to build on (Linux or Windows)
        type: string

      # BuildCookRun build config (one of development, test, shipping, etc.) - https://docs.unrealengine.com/5.3/en-US/build-configurations-reference-for-unreal-engine/
      build_configuration:
        default: "Development"
        description: BuildCookRun build config (one of development, test, shipping, etc.) - https://docs.unrealengine.com/5.3/en-US/build-configurations-reference-for-unreal-engine/
        type: string

      # if game and .uproject to build lives under a sub-directory in the repo
      project_path:
        default: ""
        description: if game to build lives under a sub-directory in the repo
        type: string

      plugin_repository:
        default: ""
        description: "If game builds rely on a plugin to download before packaging (passed down to https://github.com/robinraju/release-downloader as repository option) - Expected format {owner}/{repo}"
        type: "string"

# Idea is to run the job in parallel in all three last engine versions, uncomment concurency group to only allow one at a time
# concurrency:
#   group: linux-compile-${{ github.head_ref }}
#   cancel-in-progress: true

jobs:

  windows-build-plugin:
    name: Game build (Windows) - ${{ matrix.unreal }}

    if: github.actor == 'mklabs' && inputs.platform == 'Windows'
    runs-on: [self-hosted, Windows]

    strategy:
      matrix:
        unreal: ${{ fromJson(inputs.ue_versions) }}

    steps:
      - uses: actions/checkout@v4

      - name: Get short SHA
        run: echo "SHORT_SHA=$("${{ github.sha }}".SubString(0, 8))" >> $env:GITHUB_ENV

      - name: Set container name
        run: echo "CONTAINER_NAME=$("unreal-win64-${{ matrix.unreal }}-${{ env.SHORT_SHA }}")" >> $env:GITHUB_ENV

      - name: Switch to Windows Container
        run: |
          & "$Env:ProgramFiles\Docker\Docker\DockerCli.exe" -Verbose -SwitchWindowsEngine

      # the ue4 group in the docker container: gid=1000
      # Credits https://github.com/outoftheboxplugins/BuildMachines/blob/master/.github/workflows/compile-plugin.yml#L51
      - name: Run Docker container
        run: |
          # --device class/5B45201D-F2F2-4F3B-85BB-30FF1F953599 to run with GPU acceleration
          docker run --isolation process --device class/5B45201D-F2F2-4F3B-85BB-30FF1F953599 -td --name ${{ env.CONTAINER_NAME }} -v ${{ github.workspace }}:C:\workspace --workdir C:\workspace adamrehn/ue4-minimal:5.3.2

      - name: Install nodejs
        run: docker exec ${{ env.CONTAINER_NAME }} cinst nodejs.install -y

      - name: Installing UE CLI
        run: |
          docker exec ${{ env.CONTAINER_NAME }} pip3 install --upgrade pip
          docker exec ${{ env.CONTAINER_NAME }} pip3 install ue4cli
          docker exec ${{ env.CONTAINER_NAME }} ue4 setroot "C:\UnrealEngine"

      - name: Debug release download
        if: ${{ inputs.plugin_repository != '' }}
        run: |
          echo "Trying to download *+${{ matrix.unreal }}*.zip"

      - uses: robinraju/release-downloader@v1.9
        if: ${{ inputs.plugin_repository != '' }}
        with: 
          # The source repository path.
          # Expected format {owner}/{repo}
          # Default: ${{ github.repository }}
          repository: "${{ inputs.plugin_repository }}"
          
          # A flag to set the download target as latest release
          # The default value is 'false'
          latest: true

          # A flag to download from prerelease. It should be combined with latest flag.
          # The default value is 'false'
          # preRelease: true
          
          # The github tag. e.g: v1.0.1
          # Download assets from a specific tag/version
          # tag: ""
          
          # The release id to download files from 
          # releaseId: ""
          
          # The name of the file to download.
          # Use this field only to specify filenames other than tarball or zipball, if any.
          # Supports wildcard pattern (eg: '*', '*.deb', '*.zip' etc..)
          # fileName: "*+${{ matrix.unreal }}*.zip"
          # filename: BlueprintAttributes_0.5.0+5.3_8154e628.zip
          filename: "*.zip"

          # Download the attached tarball (*.tar.gz)
          # tarBall: false
          
          # Download the attached zipball (*.zip)
          # zipBall: false
          
          # Relative path under $GITHUB_WORKSPACE to place the downloaded file(s)
          # It will create the target directory automatically if not present
          # eg: out-file-path: "my-downloads" => It will create directory $GITHUB_WORKSPACE/my-downloads
          out-file-path: "release-downloads"

          # A flag to set if the downloaded assets are archives and should be extracted
          # Checks all downloaded files if they end with zip, tar or tar.gz and extracts them, if true.
          # Prints a warning if enabled but file is not an archive - but does not fail.
          extract: true

          # Github access token to download files from private repositories
          # https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets
          # eg: token: ${{ secrets.MY_TOKEN }}
          token: "${{ secrets.ACCESS_TOKEN }}"

          # The URL of the Github API, only use this input if you are using Github Enterprise
          # Default: "https://api.github.com"
          # Use http(s)://[hostname]/api/v3 to access the API for GitHub Enterprise Server
          # github-api-url: ""

      - name: Package Game
        run: docker exec -w C:\workspace\${{ inputs.project_path }} ${{ env.CONTAINER_NAME }} ue4 package ${{ inputs.build_configuration }}

      - name: rm container
        if: always()
        run: |
          docker stop ${{ env.CONTAINER_NAME }}
          docker rm ${{ env.CONTAINER_NAME }}