# Adjusted from the brilliant Ivan Tustanivsky who developed this for Sentry
#
# Credits to https://github.com/outoftheboxplugins/BuildMachines

name: Game package build

on:
  workflow_call:
    inputs:
      ue_versions:
        # Specify the list of unreal versions to build against
        # Ex: "['5.1', '5.2', '5.3']"
        default: "['5.3']"
        type: string

      platform:
        default: Windows
        description: Target platform to build on (Linux or Windows)
        type: string

      # BuildCookRun build config (one of development, test, shipping, etc.) - https://docs.unrealengine.com/5.3/en-US/build-configurations-reference-for-unreal-engine/
      build_configuration:
        default: "Development"
        description: BuildCookRun build config (one of development, test, shipping, etc.) - https://docs.unrealengine.com/5.3/en-US/build-configurations-reference-for-unreal-engine/
        type: string

      # if game and .uproject to build lives under a sub-directory in the repo
      project_path:
        default: ""
        description: if game to build lives under a sub-directory in the repo
        type: string

      plugin_repository:
        default: ""
        description: "Plugin repo release to download if game builds rely on a plugin to download before packaging (passed down to https://github.com/robinraju/release-downloader as repository option) - Expected format {owner}/{repo}"
        type: "string"

      plugin_path:
        default: "Plugins/${{ inputs.plugin_repository || github.repository }}"
        description: "Download path for plugin release If game builds rely on a plugin to download before packaging (passed down to https://github.com/robinraju/release-downloader as repository option) - Expected format Plugins/{plugin_name}"
        type: "string"

# Idea is to run the job in parallel in all three last engine versions, uncomment concurency group to only allow one at a time
# concurrency:
#   group: linux-compile-${{ github.head_ref }}
#   cancel-in-progress: true

jobs:

  windows-build-plugin:
    name: Game build (Windows) - ${{ matrix.unreal }}

    if: github.actor == 'mklabs' && inputs.platform == 'Windows'
    runs-on: [self-hosted, Windows]

    strategy:
      matrix:
        unreal: ${{ fromJson(inputs.ue_versions) }}

    steps:
      - uses: actions/checkout@v4

      - name: Get short SHA
        run: echo "SHORT_SHA=$("${{ github.sha }}".SubString(0, 8))" >> $env:GITHUB_ENV

      - name: Set container name
        run: echo "CONTAINER_NAME=$("unreal-win64-${{ matrix.unreal }}-${{ env.SHORT_SHA }}")" >> $env:GITHUB_ENV

      - name: Switch to Windows Container
        run: |
          & "$Env:ProgramFiles\Docker\Docker\DockerCli.exe" -Verbose -SwitchWindowsEngine

      # the ue4 group in the docker container: gid=1000
      # Credits https://github.com/outoftheboxplugins/BuildMachines/blob/master/.github/workflows/compile-plugin.yml#L51
      - name: Run Docker container
        run: |
          # --device class/5B45201D-F2F2-4F3B-85BB-30FF1F953599 to run with GPU acceleration
          docker run --isolation process --device class/5B45201D-F2F2-4F3B-85BB-30FF1F953599 -td --name ${{ env.CONTAINER_NAME }} -v ${{ github.workspace }}:C:\workspace --workdir C:\workspace adamrehn/ue4-minimal:5.3.2

      - name: Install nodejs
        run: docker exec ${{ env.CONTAINER_NAME }} cinst nodejs.install -y

      - name: Installing UE CLI
        run: |
          docker exec ${{ env.CONTAINER_NAME }} pip3 install --upgrade pip
          docker exec ${{ env.CONTAINER_NAME }} pip3 install ue4cli
          docker exec ${{ env.CONTAINER_NAME }} ue4 setroot "C:\UnrealEngine"

      - name: Debug release download
        if: ${{ inputs.plugin_repository != '' }}
        run: |
          echo "Trying to download *+${{ matrix.unreal }}*.zip"

      - uses: robinraju/release-downloader@v1.9
        if: ${{ inputs.plugin_repository != '' }}
        id: download
        with: 
          repository: "${{ inputs.plugin_repository }}"
          latest: true
          fileName: "*\\+${{ matrix.unreal }}_*.zip"
          out-file-path: "release-downloads"
          # Messes up files on extract on windows (Getting during package: Public\Abilities\GBAAttributeSetBlueprintBase.h(18): Error: Invalid use of keyword 'UFUNCTION'.  It may only appear in Class, IInterface, and Interface scopes)
          # extract: true
          token: "${{ secrets.ACCESS_TOKEN }}"

      - name: Dump Inputs context
        env:
          GITHUB_CONTEXT: ${{ toJson(inputs) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Set FILE_CONTEXT
        env:
          FILE_CONTEXT: ${{ fromJson(steps.download.outputs.downloaded_files)[0] }}
        run: echo "FILE_CONTEXT=${{ fromJson(steps.download.outputs.downloaded_files)[0] }}" >> $env:GITHUB_ENV

      - name: Unzip release
        # ${{ env.FILE_CONTEXT }} on docker container would be different
        # run: docker exec -w C:\workspace\release-downloads ${{ env.CONTAINER_NAME }} Add-Type -AssemblyName System.IO.Compression.FileSystem ; [System.IO.Compression.ZipFile]::ExtractToDirectory("${{ env.FILE_CONTEXT }}", "$PWD")
        run: Add-Type -AssemblyName System.IO.Compression.FileSystem ; [System.IO.Compression.ZipFile]::ExtractToDirectory("${{ env.FILE_CONTEXT }}", "$PWD")
        working-directory: release-downloads

      - name: Package Plugin
        run: docker exec -w C:\workspace\release-downloads ${{ env.CONTAINER_NAME }} ue4 package
        # run: ue4 package
        # working-directory: release-downloads

      - name: move plugin
        run: |
          mkdir Plugins
          npx -y shx cp -r release-downloads/dist ${{ inputs.plugin_path }}
        # run: npx shx -y cp -r release-downloads/dist ${{ inputs.plugin_path }}
        # run: |
        #   docker exec ${{ env.CONTAINER_NAME }} mkdir Plugins
        #   docker exec ${{ env.CONTAINER_NAME }} npx -y shx cp -r release-downloads/dist ${{ inputs.plugin_path }}

      - name: Package Game
        run: docker exec -w C:\workspace\${{ inputs.project_path }} ${{ env.CONTAINER_NAME }} ue4 package ${{ inputs.build_configuration }}
        # run: ue4 package ${{ inputs.build_configuration }}
        # working-directory: ${{ inputs.project_path }}

      - name: Compress archive
        run: Compress-Archive -Path .\dist\${{ inputs.platform }}\ -DestinationPath .\dist\GBA_ContentExamples_${{ inputs.build_configuration }}_${{ inputs.platform }}_${{ env.SHORT_SHA }}.zip
        working-directory: ${{ inputs.project_path }}

      - name: Upload game build to release
        uses: svenstaro/upload-release-action@v2
        with:
          file: dist/*.zip
          tag: build-${{ github.ref }}
          release_name: build-nightly-${{ github.ref }}
          repo_token: ${{ secrets.ACCESS_TOKEN }}
          overwrite: true
          file_glob: true

      # - name: rm container
      #   if: always()
      #   run: |
      #     docker stop ${{ env.CONTAINER_NAME }}
      #     docker rm ${{ env.CONTAINER_NAME }}